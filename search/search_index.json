{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Get Started with R-TYPE: Your Epic Space Adventure Begins \ud83d\ude80 Welcome to the world of R-TYPE, an iconic Horizontal Shmup (Shoot\u2019em\u2019up) game that captured the hearts of gamers in the '90s. In this project, you have the exciting opportunity to create your own version of R-TYPE, adding new dimensions to the classic gameplay. What is R-TYPE? \ud83d\udd79\ufe0f The project aims to develop a multithreaded server and a graphical client in C++ for the video game R-Type, using a custom-designed game engine. R-Type is a popular horizontal shoot'em up game from the 90s, and in this project, we will create a networked version of the game where one to four players will be able to fight the enemy Bydos together. The internal design of the game should demonstrate architectural patterns of a real game engine. The project will be implemented using CMake as the build tool, and all relevant source files, excluding unnecessary files such as binaries, temporary files, and object files, should be included in the delivery. The project will be divided into two phases: first, developing the core architecture of the game to create a functional prototype, and then expanding several aspects of the prototype to the next level by exploring specialized areas of choice from a list of proposed options. System Requirements \ud83d\udda5\ufe0f Before you embark on your space adventure, make sure your system meets the following requirements: Operating System: Windows 10 / 11 or Linux (Fedora, Ubuntu...) Dependencies system: Conan Dependencies: g++ Compiler: CMake (3.25.0) Network: Broadband internet connection Installation \ud83d\ude80 To begin your mission, follow these installation steps: Download Windows 11: Visit Download Windows 11 to download the latest version of Windows. Install CMake: Install Cmake (3.25.0) to compile the game. Download Visual Studio: After installation of Cmake, download Visual Studio to compile on Windows. It's verry IMPORTANT. Install Conan: Download Conan to install all the dependencies of the project (R-TYPE). Getting Started \ud83c\udfae Now that you're ready to embark on your intergalactic journey, here's a quick overview of the basic controls: Movement: Use the arrow keys or WASD to maneuver your spacecraft. Firing: Press the Spacebar to unleash powerful shots against your enemies. Special Abilities: Different spacecraft come with unique abilities. Experiment to discover your ship's special powers. Multiplayer Adventure \ud83c\udf1f R-TYPE isn't just a solo mission. It's a networked game that allows you to team up with one to four players to combat the evil Bydos together. Gather your friends and strategize to save the galaxy! Architectural Patterns \ud83c\udfd7\ufe0f As you dive deeper into R-TYPE's development, explore the internal design, which showcases architectural patterns of a real game engine. You'll gain valuable insights into game development while creating your masterpiece. Need Help? \ud83c\udd98 If you encounter any challenges or have questions about R-TYPE, don't hesitate to reach out to our supportive community. Visit our FAQ or contact our dedicated support team at bridge.atindokpo@epitech.eu Conclusion \ud83c\udf0c Your journey with R-TYPE is just beginning. Get ready to relive the excitement of classic gaming while adding your own unique twist to this beloved title. Start your engines, pilot your ship, and brace yourself for an unforgettable space adventure!","title":"Getting Started Guide"},{"location":"#get-started-with-r-type-your-epic-space-adventure-begins","text":"Welcome to the world of R-TYPE, an iconic Horizontal Shmup (Shoot\u2019em\u2019up) game that captured the hearts of gamers in the '90s. In this project, you have the exciting opportunity to create your own version of R-TYPE, adding new dimensions to the classic gameplay.","title":"Get Started with R-TYPE: Your Epic Space Adventure Begins \ud83d\ude80"},{"location":"#what-is-r-type","text":"The project aims to develop a multithreaded server and a graphical client in C++ for the video game R-Type, using a custom-designed game engine. R-Type is a popular horizontal shoot'em up game from the 90s, and in this project, we will create a networked version of the game where one to four players will be able to fight the enemy Bydos together. The internal design of the game should demonstrate architectural patterns of a real game engine. The project will be implemented using CMake as the build tool, and all relevant source files, excluding unnecessary files such as binaries, temporary files, and object files, should be included in the delivery. The project will be divided into two phases: first, developing the core architecture of the game to create a functional prototype, and then expanding several aspects of the prototype to the next level by exploring specialized areas of choice from a list of proposed options.","title":"What is R-TYPE? \ud83d\udd79\ufe0f"},{"location":"#system-requirements","text":"Before you embark on your space adventure, make sure your system meets the following requirements: Operating System: Windows 10 / 11 or Linux (Fedora, Ubuntu...) Dependencies system: Conan Dependencies: g++ Compiler: CMake (3.25.0) Network: Broadband internet connection","title":"System Requirements \ud83d\udda5\ufe0f"},{"location":"#installation","text":"To begin your mission, follow these installation steps: Download Windows 11: Visit Download Windows 11 to download the latest version of Windows. Install CMake: Install Cmake (3.25.0) to compile the game. Download Visual Studio: After installation of Cmake, download Visual Studio to compile on Windows. It's verry IMPORTANT. Install Conan: Download Conan to install all the dependencies of the project (R-TYPE).","title":"Installation \ud83d\ude80"},{"location":"#getting-started","text":"Now that you're ready to embark on your intergalactic journey, here's a quick overview of the basic controls: Movement: Use the arrow keys or WASD to maneuver your spacecraft. Firing: Press the Spacebar to unleash powerful shots against your enemies. Special Abilities: Different spacecraft come with unique abilities. Experiment to discover your ship's special powers.","title":"Getting Started \ud83c\udfae"},{"location":"#multiplayer-adventure","text":"R-TYPE isn't just a solo mission. It's a networked game that allows you to team up with one to four players to combat the evil Bydos together. Gather your friends and strategize to save the galaxy!","title":"Multiplayer Adventure \ud83c\udf1f"},{"location":"#architectural-patterns","text":"As you dive deeper into R-TYPE's development, explore the internal design, which showcases architectural patterns of a real game engine. You'll gain valuable insights into game development while creating your masterpiece.","title":"Architectural Patterns \ud83c\udfd7\ufe0f"},{"location":"#need-help","text":"If you encounter any challenges or have questions about R-TYPE, don't hesitate to reach out to our supportive community. Visit our FAQ or contact our dedicated support team at bridge.atindokpo@epitech.eu","title":"Need Help? \ud83c\udd98"},{"location":"#conclusion","text":"Your journey with R-TYPE is just beginning. Get ready to relive the excitement of classic gaming while adding your own unique twist to this beloved title. Start your engines, pilot your ship, and brace yourself for an unforgettable space adventure!","title":"Conclusion \ud83c\udf0c"},{"location":"FAQ/","text":"FAQ Usage \ud83d\udccb STEP1: Compile on Linux pip install conan conan profile detect --force conan install . --output-folder=build --build=missing cd build cmake -DCMAKE_BUILD_TYPE=Release .. make root of the project run the binaries STEP2: Compile on Windows install Visual studio install buildtools of visual studio install C++ dependencies and cmake in visual studio install conan conan profile detect --force conan install . --output-folder=build --build=missing cd build cmake -DCMAKE_TOOLCHAIN_FILE=. .. cmake --build . --config Release root of the project run the binaries these are the binaries: r-type_server.exe and r-type_client.exe STEP3: CPACK TO UNZIP AND BUILD THE PROJECT CMake has a corresponding meta package system CPack, which generates configuration files for numerous packaging systems. Distributing code and binary executablees and libraries to users without requiring them to compile a project is done via these packages. CPack creates these binary packages like Windows .msi, Linux .deb/.rpm, MacOS .dmg, etc. CPack also creates traditional source archives as are also generated by GitHub Releases, but with fine-grained control of the contents. Assuming the PROJECT_BINARY_DIR is \u201cbuild\u201d, CPack generates build/CPackConfig.cmake for binary packages and build/CPackSourceConfig.cmake for source packages. CPackConfig.cmake is generated according to install() commands in the CMakeLists.txt files of the project. Note that in general \u201cinstall()\u201d DESTINATION should always use relative paths. CPack ignores install() items with absolute DESTINATION. CPackSourceConfig.cmake works the opposite way\u2013it includes everything not excluded by CPACK_SOURCE_IGNORE_FILES, so we make a file cmake/.cpack_ignore with regex excluding non-source files. As a last step at the end of the main CMakeLists.txt after all install(), we include cmake/cpack.cmake. Run this script (builder.sh) at the root of the project: ./builder.sh It will create a package folder at the root of the project. This folder contain a R-Type-0.1.1-Source.tar.bz2 file. To unzip it run this command: tar -xvf R-Type-0.1.1-Source.tar.bz2 This command will create a R-Type-0.1.1-Source folder which contain all the ressources of our project. Enjoy the game \ud83c\udfae To launch the server: ./r_type_server <address> <port> <lobby_status> Now, the clients could connect to the server To launch the client: ./r_type_client <address> <port> <sound> <lobby_status>","title":"FAQ"},{"location":"FAQ/#faq","text":"","title":"FAQ"},{"location":"FAQ/#usage","text":"","title":"Usage \ud83d\udccb"},{"location":"FAQ/#step1-compile-on-linux","text":"pip install conan conan profile detect --force conan install . --output-folder=build --build=missing cd build cmake -DCMAKE_BUILD_TYPE=Release .. make root of the project run the binaries","title":"STEP1: Compile on Linux"},{"location":"FAQ/#step2-compile-on-windows","text":"install Visual studio install buildtools of visual studio install C++ dependencies and cmake in visual studio install conan conan profile detect --force conan install . --output-folder=build --build=missing cd build cmake -DCMAKE_TOOLCHAIN_FILE=. .. cmake --build . --config Release root of the project run the binaries these are the binaries: r-type_server.exe and r-type_client.exe","title":"STEP2: Compile on Windows"},{"location":"FAQ/#step3-cpack-to-unzip-and-build-the-project","text":"CMake has a corresponding meta package system CPack, which generates configuration files for numerous packaging systems. Distributing code and binary executablees and libraries to users without requiring them to compile a project is done via these packages. CPack creates these binary packages like Windows .msi, Linux .deb/.rpm, MacOS .dmg, etc. CPack also creates traditional source archives as are also generated by GitHub Releases, but with fine-grained control of the contents. Assuming the PROJECT_BINARY_DIR is \u201cbuild\u201d, CPack generates build/CPackConfig.cmake for binary packages and build/CPackSourceConfig.cmake for source packages. CPackConfig.cmake is generated according to install() commands in the CMakeLists.txt files of the project. Note that in general \u201cinstall()\u201d DESTINATION should always use relative paths. CPack ignores install() items with absolute DESTINATION. CPackSourceConfig.cmake works the opposite way\u2013it includes everything not excluded by CPACK_SOURCE_IGNORE_FILES, so we make a file cmake/.cpack_ignore with regex excluding non-source files. As a last step at the end of the main CMakeLists.txt after all install(), we include cmake/cpack.cmake. Run this script (builder.sh) at the root of the project: ./builder.sh It will create a package folder at the root of the project. This folder contain a R-Type-0.1.1-Source.tar.bz2 file. To unzip it run this command: tar -xvf R-Type-0.1.1-Source.tar.bz2 This command will create a R-Type-0.1.1-Source folder which contain all the ressources of our project. Enjoy the game \ud83c\udfae","title":"STEP3: CPACK TO UNZIP AND BUILD THE PROJECT"},{"location":"FAQ/#to-launch-the-server","text":"./r_type_server <address> <port> <lobby_status> Now, the clients could connect to the server","title":"To launch the server:"},{"location":"FAQ/#to-launch-the-client","text":"./r_type_client <address> <port> <sound> <lobby_status>","title":"To launch the client:"},{"location":"about/","text":"Architecture and Code Structure In this section, we will provide an overview of the architectural design and code structure of the R-TYPE game project. Understanding the high-level architecture and organization of the codebase is essential for anyone looking to contribute to or work on the project. Architectural Overview The R-TYPE game follows a typical game architecture, consisting of several key components and systems that work together to create the gameplay experience. Here's an overview of the game's architecture: Game Engine The core of the game, responsible for managing game loops, rendering, and input handling. Provides the foundation for game mechanics and systems. Physics Engine Manages the physics simulation for player movement, enemy behavior, and interactions. Integrates collision detection and response. Graphics Engine Handles rendering of game assets, including characters, enemies, and background elements. Supports sprite animation and special effects. Game Logic Contains the high-level game rules and logic. Coordinates interactions between players, enemies, and game objects. Networking Enables multiplayer functionality by handling network communication. Synchronizes game state between clients and the server. User Interface (UI) Manages the in-game user interface, including menus, HUD elements, and player status. Provides a seamless and intuitive user experience. Code Structure and Organization Our C++ codebase is organized following best practices to maintain clarity, modularity, and extensibility. Here's an overview of the code structure: Directory Structure Root Directory . \u251c\u2500\u2500 Assets/ \u2502 \u251c\u2500\u2500 acceleration1.gif \u2502 \u251c\u2500\u2500 acceleration2.gif \u2502 \u251c\u2500\u2500 boule1.gif \u2502 \u251c\u2500\u2500 boule2.gif \u2502 \u251c\u2500\u2500 explosion1.gif \u2502 \u251c\u2500\u2500 explosion2.gif \u2502 \u251c\u2500\u2500 test.cpp \u2502 \u251c\u2500\u2500 tir10.gif \u2502 \u251c\u2500\u2500 tir11.gif \u2502 \u251c\u2500\u2500 tir12.gif \u2502 \u251c\u2500\u2500 tir1.gif \u2502 \u251c\u2500\u2500 tir2.gif \u2502 \u251c\u2500\u2500 tir3.gif \u2502 \u251c\u2500\u2500 tir4.gif \u2502 \u251c\u2500\u2500 tir5.gif \u2502 \u251c\u2500\u2500 tir6.gif \u2502 \u251c\u2500\u2500 tir7.gif \u2502 \u251c\u2500\u2500 tir8.gif \u2502 \u251c\u2500\u2500 tir9.gif \u2502 \u251c\u2500\u2500 vaisseau_droite.gif \u2502 \u2514\u2500\u2500 vaisseau_gauche.gif \u251c\u2500\u2500 Builder/ \u2502 \u2514\u2500\u2500 builder.sh \u251c\u2500\u2500 CMake/ \u2502 \u2514\u2500\u2500 CMakeLists.txt \u251c\u2500\u2500 Conan/ \u2502 \u2514\u2500\u2500 conanfile.txt \u251c\u2500\u2500 Docker/ \u2502 \u2514\u2500\u2500 Dockerfile \u251c\u2500\u2500 ECS/ \u2502 \u251c\u2500\u2500 AComponent.hpp \u2502 \u251c\u2500\u2500 CMakeLists.txt \u2502 \u251c\u2500\u2500 Components/ \u2502 \u2502 \u251c\u2500\u2500 Acceleration.hpp \u2502 \u2502 \u251c\u2500\u2500 AllComponents.hpp \u2502 \u2502 \u251c\u2500\u2500 Collidable.hpp \u2502 \u2502 \u251c\u2500\u2500 Controllable.hpp \u2502 \u2502 \u251c\u2500\u2500 Drawable.cpp \u2502 \u2502 \u251c\u2500\u2500 Drawable.hpp \u2502 \u2502 \u2514\u2500\u2500 Position.hpp \u2502 \u251c\u2500\u2500 Entity.cpp \u2502 \u251c\u2500\u2500 Entity.hpp \u2502 \u251c\u2500\u2500 EntityManager.cpp \u2502 \u251c\u2500\u2500 EntityManager.hpp \u2502 \u251c\u2500\u2500 IComponent.hpp \u2502 \u251c\u2500\u2500 main.cpp \u2502 \u251c\u2500\u2500 Systems/ \u2502 \u2502 \u251c\u2500\u2500 ASystem.hpp \u2502 \u2502 \u251c\u2500\u2500 ISystem.hpp \u2502 \u2502 \u251c\u2500\u2500 MovementSystem.cpp \u2502 \u2502 \u251c\u2500\u2500 MovementSystem.hpp \u2502 \u2502 \u251c\u2500\u2500 RenderSystem.cpp \u2502 \u2502 \u2514\u2500\u2500 RenderSystem.hpp \u2502 \u2514\u2500\u2500 test.cpp \u251c\u2500\u2500 GUI/ \u2502 \u251c\u2500\u2500 Audio/ \u2502 \u2502 \u251c\u2500\u2500 Audio.cpp \u2502 \u2502 \u2514\u2500\u2500 Audio.hpp \u2502 \u251c\u2500\u2500 CMakeLists.txt \u2502 \u251c\u2500\u2500 Core/ \u2502 \u2502 \u251c\u2500\u2500 Core.cpp \u2502 \u2502 \u2514\u2500\u2500 Core.hpp \u2502 \u251c\u2500\u2500 Entities/ \u2502 \u2502 \u251c\u2500\u2500 Arms/ \u2502 \u2502 \u2502 \u251c\u2500\u2500 Missile.cpp \u2502 \u2502 \u2502 \u2514\u2500\u2500 Missile.hpp \u2502 \u2502 \u251c\u2500\u2500 Background/ \u2502 \u2502 \u2502 \u251c\u2500\u2500 shooting_star.cpp \u2502 \u2502 \u2502 \u251c\u2500\u2500 shooting_star.hpp \u2502 \u2502 \u2502 \u251c\u2500\u2500 star.cpp \u2502 \u2502 \u2502 \u2514\u2500\u2500 star.hpp \u2502 \u2502 \u251c\u2500\u2500 Player/ \u2502 \u2502 \u2502 \u251c\u2500\u2500 Player.cpp \u2502 \u2502 \u2502 \u2514\u2500\u2500 Player.hpp \u2502 \u2502 \u2514\u2500\u2500 Power/ \u2502 \u2502 \u251c\u2500\u2500 Powerup.cpp \u2502 \u2502 \u2514\u2500\u2500 Powerup.hpp \u2502 \u251c\u2500\u2500 Exceptions/ \u2502 \u2502 \u2514\u2500\u2500 Exception.hpp \u2502 \u251c\u2500\u2500 Interface/ \u2502 \u2502 \u251c\u2500\u2500 ICommunication.hpp \u2502 \u2502 \u2514\u2500\u2500 IRenderer.hpp \u2502 \u251c\u2500\u2500 main.cpp \u2502 \u251c\u2500\u2500 Menu/ \u2502 \u2502 \u251c\u2500\u2500 Menu.cpp \u2502 \u2502 \u2514\u2500\u2500 Menu.hpp \u2502 \u251c\u2500\u2500 Network/ \u2502 \u2502 \u251c\u2500\u2500 NetworkCli.cpp \u2502 \u2502 \u2514\u2500\u2500 NetworkCli.hpp \u2502 \u2514\u2500\u2500 Renderer/ \u2502 \u251c\u2500\u2500 Renderer.cpp \u2502 \u2514\u2500\u2500 Renderer.hpp \u251c\u2500\u2500 Images/ \u2502 \u2514\u2500\u2500 hh.png \u251c\u2500\u2500 README.md \u251c\u2500\u2500 R-TYPE_DEV_DOCUMENTATION/ \u2502 \u251c\u2500\u2500 docs/ \u2502 \u2502 \u251c\u2500\u2500 about.md \u2502 \u2502 \u251c\u2500\u2500 contact.md \u2502 \u2502 \u251c\u2500\u2500 FAQ.md \u2502 \u2502 \u251c\u2500\u2500 index.md \u2502 \u2502 \u251c\u2500\u2500 installation.md \u2502 \u2502 \u2514\u2500\u2500 license.md \u2502 \u251c\u2500\u2500 mkdocs.yml \u2502 \u2514\u2500\u2500 site/ \u251c\u2500\u2500 R-TYPE.drawio - draw.io - Google Chrome 03_10_2023 11_11_15.png:Zone.Identifier \u251c\u2500\u2500 Server/ \u2502 \u251c\u2500\u2500 CMakeLists.txt \u2502 \u251c\u2500\u2500 include/ \u2502 \u2502 \u251c\u2500\u2500 binary_handling.hpp \u2502 \u2502 \u251c\u2500\u2500 Client_Handling.hpp \u2502 \u2502 \u251c\u2500\u2500 IMessage.hpp \u2502 \u2502 \u2514\u2500\u2500 main_server.hpp \u2502 \u2514\u2500\u2500 src/ \u2502 \u2514\u2500\u2500 main_server.cpp \u2514\u2500\u2500 Utils/ \u2514\u2500\u2500 shared_message.hpp Assets: This folder contains multimedia resources used in the game, such as animated images (GIFs). These visual resources are used to create in-game elements such as spaceships, projectiles, explosions, etc. Builder: The builder.sh script is used to automate certain project build tasks. It may contain compilation, installation, or project-specific configuration commands. CMake: This folder contains configuration files for the CMake build system, which generates the necessary build files for compiling the project. Docker: The Dockerfile is used to create a Docker image of the project, making it easier to deploy and run the project in a containerized environment. ECS: This folder contains the source code related to the Entity Component System (ECS) of the game. It is organized into sub-folders for components and systems of the game. GUI: This folder contains the source code for the game client's user interface (UI). It is organized into sub-folders for different aspects of the UI, such as audio, rendering, entities, etc. Images: This folder contains images or other visual resources that are not directly tied to the source code but can be used in documentation or for other purposes. R-TYPE_DEV_DOCUMENTATION: As described earlier, this folder contains all the necessary files for online documentation, such as Markdown files for documentation and MkDocs configuration files. Server: This folder contains the source code for the game server. It is organized into sub-folders for header files (include) and source files (src) of the server. Utils: This folder contains utility or shared files that can be used in multiple parts of the project. For example, the shared_message.hpp file could contain definitions of messages shared between the client and the server. Classes Core Description : La classe Core repr\u00e9sente le c\u0153ur du syst\u00e8me du jeu. Elle est responsable de la gestion de la logique principale du jeu. M\u00e9thodes Principales : Core(): Constructeur de la classe. ~Core(): Destructeur de la classe. run(std::string port, std::string ip): M\u00e9thode pour ex\u00e9cuter le jeu en sp\u00e9cifiant le port et l'adresse IP. Exemple d'Utilisation : cpp Core gameCore; gameCore.run(\"12345\", \"127.0.0.1\"); AComponent Description : La classe AComponent est une classe de base abstraite pour les composants du jeu. Elle sert de classe de base pour d'autres classes de composants. Entity Description : La classe Entity repr\u00e9sente une entit\u00e9 dans le jeu. Une entit\u00e9 est un objet du jeu qui peut avoir diff\u00e9rents composants attach\u00e9s. M\u00e9thodes Principales : Entity(size_t id): Constructeur de la classe avec un identifiant unique. ~Entity(): Destructeur de la classe. AddComponent(Params&&... args): M\u00e9thode pour ajouter un composant \u00e0 l'entit\u00e9. RemoveComponent(): M\u00e9thode pour supprimer un composant de l'entit\u00e9. hasComp(): M\u00e9thode pour v\u00e9rifier si l'entit\u00e9 a un composant donn\u00e9. getComponent(): M\u00e9thode pour obtenir un composant sp\u00e9cifique de l'entit\u00e9. nbComps(): M\u00e9thode pour obtenir le nombre de composants attach\u00e9s \u00e0 l'entit\u00e9. Exemple d'Utilisation : cpp Entity playerEntity(1); playerEntity.AddComponent<Position>(10.0f, 20.0f); if (playerEntity.hasComp<Position>()) { auto positionComponent = playerEntity.getComponent<Position>(); // Utilisation du composant de position } EntityManager Description : La classe EntityManager est responsable de la gestion des entit\u00e9s du jeu, de leur cr\u00e9ation et de leur destruction. M\u00e9thodes Principales : EntityManager(): Constructeur de la classe. ~EntityManager(): Destructeur de la classe. removeElement(Entity valueToRemove): M\u00e9thode pour supprimer une entit\u00e9 de la liste. createEntity(): M\u00e9thode pour cr\u00e9er une nouvelle entit\u00e9. DestroyEntity(Entity id): M\u00e9thode pour d\u00e9truire une entit\u00e9 par son identifiant. getEntityById(size_t id): M\u00e9thode pour obtenir une entit\u00e9 par son identifiant. getEntities(): M\u00e9thode pour obtenir la liste des entit\u00e9s. Exemple d'Utilisation : cpp EntityManager entityManager; Entity playerEntity = entityManager.createEntity(); entityManager.DestroyEntity(playerEntity.getId()); ShootingStar Description : La classe ShootingStar repr\u00e9sente une \u00e9toile filante dans le jeu. Une \u00e9toile filante se d\u00e9place \u00e0 travers l'\u00e9cran avec une vitesse donn\u00e9e et peut \u00eatre mise \u00e0 jour et dessin\u00e9e. M\u00e9thodes Principales : ShootingStar(float windowWidth, float windowHeight): Constructeur de la classe qui prend la largeur et la hauteur de la fen\u00eatre du jeu comme param\u00e8tres. void update(float deltaTime): M\u00e9thode pour mettre \u00e0 jour la position de l'\u00e9toile filante en fonction du temps \u00e9coul\u00e9 depuis la derni\u00e8re mise \u00e0 jour. void draw(sf::RenderWindow& window): M\u00e9thode pour dessiner l'\u00e9toile filante sur la fen\u00eatre du jeu. bool isFinished() const: M\u00e9thode pour v\u00e9rifier si l'\u00e9toile filante a termin\u00e9 son trajet. Exemple d'Utilisation : cpp ShootingStar star(800.0f, 600.0f); star.update(0.1f); // Mettre \u00e0 jour la position de l'\u00e9toile filante if (star.isFinished()) { // L'\u00e9toile filante a termin\u00e9 son trajet } Star Description : La classe Star repr\u00e9sente une \u00e9toile dans le jeu. Les \u00e9toiles sont des objets statiques qui peuvent \u00eatre mises \u00e0 jour et dessin\u00e9es. M\u00e9thodes Principales : Star(float windowWidth, float windowHeight, float depth): Constructeur de la classe qui prend la largeur et la hauteur de la fen\u00eatre du jeu, ainsi que la profondeur de l'\u00e9toile comme param\u00e8tres. void update(float deltaTime): M\u00e9thode pour mettre \u00e0 jour l'\u00e9toile en fonction du temps \u00e9coul\u00e9 depuis la derni\u00e8re mise \u00e0 jour. void draw(sf::RenderWindow& window): M\u00e9thode pour dessiner l'\u00e9toile sur la fen\u00eatre du jeu. sf::Vector2f getPosition() const: M\u00e9thode pour obtenir la position actuelle de l'\u00e9toile. Exemple d'Utilisation : cpp Star star(800.0f, 600.0f, 1.0f); star.update(0.1f); // Mettre \u00e0 jour l'\u00e9toile sf::Vector2f position = star.getPosition(); Code Conventions and Best Practices To maintain code quality and consistency, we follow these coding conventions and best practices: C++ code adheres to industry-standard coding practices. Meaningful variable and function names. Extensive use of comments and documentation. Unit tests for critical components. Git version control with clear commit messages. Code reviews for contributions to ensure quality and conformity. By adhering to these conventions and best practices, we ensure that the codebase remains maintainable and welcoming to new developers. Tutorials and How-To's To help you get started with contributing to the R-TYPE project in C++, we've prepared a set of tutorials and how-to guides. These resources will walk you through common development tasks and provide step-by-step instructions. How to Implement a New Enemy Type Setting Up Multiplayer and Networking Adding New Game Levels Contribution Guidelines We welcome contributions from C++ developers who are passionate about enhancing the R-TYPE game. Before you start, please review our contribution guidelines to understand our processes and expectations.","title":"Classes"},{"location":"about/#architecture-and-code-structure","text":"In this section, we will provide an overview of the architectural design and code structure of the R-TYPE game project. Understanding the high-level architecture and organization of the codebase is essential for anyone looking to contribute to or work on the project.","title":"Architecture and Code Structure"},{"location":"about/#architectural-overview","text":"The R-TYPE game follows a typical game architecture, consisting of several key components and systems that work together to create the gameplay experience. Here's an overview of the game's architecture:","title":"Architectural Overview"},{"location":"about/#game-engine","text":"The core of the game, responsible for managing game loops, rendering, and input handling. Provides the foundation for game mechanics and systems.","title":"Game Engine"},{"location":"about/#physics-engine","text":"Manages the physics simulation for player movement, enemy behavior, and interactions. Integrates collision detection and response.","title":"Physics Engine"},{"location":"about/#graphics-engine","text":"Handles rendering of game assets, including characters, enemies, and background elements. Supports sprite animation and special effects.","title":"Graphics Engine"},{"location":"about/#game-logic","text":"Contains the high-level game rules and logic. Coordinates interactions between players, enemies, and game objects.","title":"Game Logic"},{"location":"about/#networking","text":"Enables multiplayer functionality by handling network communication. Synchronizes game state between clients and the server.","title":"Networking"},{"location":"about/#user-interface-ui","text":"Manages the in-game user interface, including menus, HUD elements, and player status. Provides a seamless and intuitive user experience.","title":"User Interface (UI)"},{"location":"about/#code-structure-and-organization","text":"Our C++ codebase is organized following best practices to maintain clarity, modularity, and extensibility. Here's an overview of the code structure:","title":"Code Structure and Organization"},{"location":"about/#directory-structure","text":"Root Directory . \u251c\u2500\u2500 Assets/ \u2502 \u251c\u2500\u2500 acceleration1.gif \u2502 \u251c\u2500\u2500 acceleration2.gif \u2502 \u251c\u2500\u2500 boule1.gif \u2502 \u251c\u2500\u2500 boule2.gif \u2502 \u251c\u2500\u2500 explosion1.gif \u2502 \u251c\u2500\u2500 explosion2.gif \u2502 \u251c\u2500\u2500 test.cpp \u2502 \u251c\u2500\u2500 tir10.gif \u2502 \u251c\u2500\u2500 tir11.gif \u2502 \u251c\u2500\u2500 tir12.gif \u2502 \u251c\u2500\u2500 tir1.gif \u2502 \u251c\u2500\u2500 tir2.gif \u2502 \u251c\u2500\u2500 tir3.gif \u2502 \u251c\u2500\u2500 tir4.gif \u2502 \u251c\u2500\u2500 tir5.gif \u2502 \u251c\u2500\u2500 tir6.gif \u2502 \u251c\u2500\u2500 tir7.gif \u2502 \u251c\u2500\u2500 tir8.gif \u2502 \u251c\u2500\u2500 tir9.gif \u2502 \u251c\u2500\u2500 vaisseau_droite.gif \u2502 \u2514\u2500\u2500 vaisseau_gauche.gif \u251c\u2500\u2500 Builder/ \u2502 \u2514\u2500\u2500 builder.sh \u251c\u2500\u2500 CMake/ \u2502 \u2514\u2500\u2500 CMakeLists.txt \u251c\u2500\u2500 Conan/ \u2502 \u2514\u2500\u2500 conanfile.txt \u251c\u2500\u2500 Docker/ \u2502 \u2514\u2500\u2500 Dockerfile \u251c\u2500\u2500 ECS/ \u2502 \u251c\u2500\u2500 AComponent.hpp \u2502 \u251c\u2500\u2500 CMakeLists.txt \u2502 \u251c\u2500\u2500 Components/ \u2502 \u2502 \u251c\u2500\u2500 Acceleration.hpp \u2502 \u2502 \u251c\u2500\u2500 AllComponents.hpp \u2502 \u2502 \u251c\u2500\u2500 Collidable.hpp \u2502 \u2502 \u251c\u2500\u2500 Controllable.hpp \u2502 \u2502 \u251c\u2500\u2500 Drawable.cpp \u2502 \u2502 \u251c\u2500\u2500 Drawable.hpp \u2502 \u2502 \u2514\u2500\u2500 Position.hpp \u2502 \u251c\u2500\u2500 Entity.cpp \u2502 \u251c\u2500\u2500 Entity.hpp \u2502 \u251c\u2500\u2500 EntityManager.cpp \u2502 \u251c\u2500\u2500 EntityManager.hpp \u2502 \u251c\u2500\u2500 IComponent.hpp \u2502 \u251c\u2500\u2500 main.cpp \u2502 \u251c\u2500\u2500 Systems/ \u2502 \u2502 \u251c\u2500\u2500 ASystem.hpp \u2502 \u2502 \u251c\u2500\u2500 ISystem.hpp \u2502 \u2502 \u251c\u2500\u2500 MovementSystem.cpp \u2502 \u2502 \u251c\u2500\u2500 MovementSystem.hpp \u2502 \u2502 \u251c\u2500\u2500 RenderSystem.cpp \u2502 \u2502 \u2514\u2500\u2500 RenderSystem.hpp \u2502 \u2514\u2500\u2500 test.cpp \u251c\u2500\u2500 GUI/ \u2502 \u251c\u2500\u2500 Audio/ \u2502 \u2502 \u251c\u2500\u2500 Audio.cpp \u2502 \u2502 \u2514\u2500\u2500 Audio.hpp \u2502 \u251c\u2500\u2500 CMakeLists.txt \u2502 \u251c\u2500\u2500 Core/ \u2502 \u2502 \u251c\u2500\u2500 Core.cpp \u2502 \u2502 \u2514\u2500\u2500 Core.hpp \u2502 \u251c\u2500\u2500 Entities/ \u2502 \u2502 \u251c\u2500\u2500 Arms/ \u2502 \u2502 \u2502 \u251c\u2500\u2500 Missile.cpp \u2502 \u2502 \u2502 \u2514\u2500\u2500 Missile.hpp \u2502 \u2502 \u251c\u2500\u2500 Background/ \u2502 \u2502 \u2502 \u251c\u2500\u2500 shooting_star.cpp \u2502 \u2502 \u2502 \u251c\u2500\u2500 shooting_star.hpp \u2502 \u2502 \u2502 \u251c\u2500\u2500 star.cpp \u2502 \u2502 \u2502 \u2514\u2500\u2500 star.hpp \u2502 \u2502 \u251c\u2500\u2500 Player/ \u2502 \u2502 \u2502 \u251c\u2500\u2500 Player.cpp \u2502 \u2502 \u2502 \u2514\u2500\u2500 Player.hpp \u2502 \u2502 \u2514\u2500\u2500 Power/ \u2502 \u2502 \u251c\u2500\u2500 Powerup.cpp \u2502 \u2502 \u2514\u2500\u2500 Powerup.hpp \u2502 \u251c\u2500\u2500 Exceptions/ \u2502 \u2502 \u2514\u2500\u2500 Exception.hpp \u2502 \u251c\u2500\u2500 Interface/ \u2502 \u2502 \u251c\u2500\u2500 ICommunication.hpp \u2502 \u2502 \u2514\u2500\u2500 IRenderer.hpp \u2502 \u251c\u2500\u2500 main.cpp \u2502 \u251c\u2500\u2500 Menu/ \u2502 \u2502 \u251c\u2500\u2500 Menu.cpp \u2502 \u2502 \u2514\u2500\u2500 Menu.hpp \u2502 \u251c\u2500\u2500 Network/ \u2502 \u2502 \u251c\u2500\u2500 NetworkCli.cpp \u2502 \u2502 \u2514\u2500\u2500 NetworkCli.hpp \u2502 \u2514\u2500\u2500 Renderer/ \u2502 \u251c\u2500\u2500 Renderer.cpp \u2502 \u2514\u2500\u2500 Renderer.hpp \u251c\u2500\u2500 Images/ \u2502 \u2514\u2500\u2500 hh.png \u251c\u2500\u2500 README.md \u251c\u2500\u2500 R-TYPE_DEV_DOCUMENTATION/ \u2502 \u251c\u2500\u2500 docs/ \u2502 \u2502 \u251c\u2500\u2500 about.md \u2502 \u2502 \u251c\u2500\u2500 contact.md \u2502 \u2502 \u251c\u2500\u2500 FAQ.md \u2502 \u2502 \u251c\u2500\u2500 index.md \u2502 \u2502 \u251c\u2500\u2500 installation.md \u2502 \u2502 \u2514\u2500\u2500 license.md \u2502 \u251c\u2500\u2500 mkdocs.yml \u2502 \u2514\u2500\u2500 site/ \u251c\u2500\u2500 R-TYPE.drawio - draw.io - Google Chrome 03_10_2023 11_11_15.png:Zone.Identifier \u251c\u2500\u2500 Server/ \u2502 \u251c\u2500\u2500 CMakeLists.txt \u2502 \u251c\u2500\u2500 include/ \u2502 \u2502 \u251c\u2500\u2500 binary_handling.hpp \u2502 \u2502 \u251c\u2500\u2500 Client_Handling.hpp \u2502 \u2502 \u251c\u2500\u2500 IMessage.hpp \u2502 \u2502 \u2514\u2500\u2500 main_server.hpp \u2502 \u2514\u2500\u2500 src/ \u2502 \u2514\u2500\u2500 main_server.cpp \u2514\u2500\u2500 Utils/ \u2514\u2500\u2500 shared_message.hpp Assets: This folder contains multimedia resources used in the game, such as animated images (GIFs). These visual resources are used to create in-game elements such as spaceships, projectiles, explosions, etc. Builder: The builder.sh script is used to automate certain project build tasks. It may contain compilation, installation, or project-specific configuration commands. CMake: This folder contains configuration files for the CMake build system, which generates the necessary build files for compiling the project. Docker: The Dockerfile is used to create a Docker image of the project, making it easier to deploy and run the project in a containerized environment. ECS: This folder contains the source code related to the Entity Component System (ECS) of the game. It is organized into sub-folders for components and systems of the game. GUI: This folder contains the source code for the game client's user interface (UI). It is organized into sub-folders for different aspects of the UI, such as audio, rendering, entities, etc. Images: This folder contains images or other visual resources that are not directly tied to the source code but can be used in documentation or for other purposes. R-TYPE_DEV_DOCUMENTATION: As described earlier, this folder contains all the necessary files for online documentation, such as Markdown files for documentation and MkDocs configuration files. Server: This folder contains the source code for the game server. It is organized into sub-folders for header files (include) and source files (src) of the server. Utils: This folder contains utility or shared files that can be used in multiple parts of the project. For example, the shared_message.hpp file could contain definitions of messages shared between the client and the server.","title":"Directory Structure"},{"location":"about/#classes","text":"","title":"Classes"},{"location":"about/#core","text":"","title":"Core"},{"location":"about/#description","text":"La classe Core repr\u00e9sente le c\u0153ur du syst\u00e8me du jeu. Elle est responsable de la gestion de la logique principale du jeu.","title":"Description :"},{"location":"about/#methodes-principales","text":"Core(): Constructeur de la classe. ~Core(): Destructeur de la classe. run(std::string port, std::string ip): M\u00e9thode pour ex\u00e9cuter le jeu en sp\u00e9cifiant le port et l'adresse IP.","title":"M\u00e9thodes Principales :"},{"location":"about/#exemple-dutilisation","text":"cpp Core gameCore; gameCore.run(\"12345\", \"127.0.0.1\");","title":"Exemple d'Utilisation :"},{"location":"about/#acomponent","text":"","title":"AComponent"},{"location":"about/#description_1","text":"La classe AComponent est une classe de base abstraite pour les composants du jeu. Elle sert de classe de base pour d'autres classes de composants.","title":"Description :"},{"location":"about/#entity","text":"","title":"Entity"},{"location":"about/#description_2","text":"La classe Entity repr\u00e9sente une entit\u00e9 dans le jeu. Une entit\u00e9 est un objet du jeu qui peut avoir diff\u00e9rents composants attach\u00e9s.","title":"Description :"},{"location":"about/#methodes-principales_1","text":"Entity(size_t id): Constructeur de la classe avec un identifiant unique. ~Entity(): Destructeur de la classe. AddComponent(Params&&... args): M\u00e9thode pour ajouter un composant \u00e0 l'entit\u00e9. RemoveComponent(): M\u00e9thode pour supprimer un composant de l'entit\u00e9. hasComp(): M\u00e9thode pour v\u00e9rifier si l'entit\u00e9 a un composant donn\u00e9. getComponent(): M\u00e9thode pour obtenir un composant sp\u00e9cifique de l'entit\u00e9. nbComps(): M\u00e9thode pour obtenir le nombre de composants attach\u00e9s \u00e0 l'entit\u00e9.","title":"M\u00e9thodes Principales :"},{"location":"about/#exemple-dutilisation_1","text":"cpp Entity playerEntity(1); playerEntity.AddComponent<Position>(10.0f, 20.0f); if (playerEntity.hasComp<Position>()) { auto positionComponent = playerEntity.getComponent<Position>(); // Utilisation du composant de position }","title":"Exemple d'Utilisation :"},{"location":"about/#entitymanager","text":"","title":"EntityManager"},{"location":"about/#description_3","text":"La classe EntityManager est responsable de la gestion des entit\u00e9s du jeu, de leur cr\u00e9ation et de leur destruction.","title":"Description :"},{"location":"about/#methodes-principales_2","text":"EntityManager(): Constructeur de la classe. ~EntityManager(): Destructeur de la classe. removeElement(Entity valueToRemove): M\u00e9thode pour supprimer une entit\u00e9 de la liste. createEntity(): M\u00e9thode pour cr\u00e9er une nouvelle entit\u00e9. DestroyEntity(Entity id): M\u00e9thode pour d\u00e9truire une entit\u00e9 par son identifiant. getEntityById(size_t id): M\u00e9thode pour obtenir une entit\u00e9 par son identifiant. getEntities(): M\u00e9thode pour obtenir la liste des entit\u00e9s.","title":"M\u00e9thodes Principales :"},{"location":"about/#exemple-dutilisation_2","text":"cpp EntityManager entityManager; Entity playerEntity = entityManager.createEntity(); entityManager.DestroyEntity(playerEntity.getId());","title":"Exemple d'Utilisation :"},{"location":"about/#shootingstar","text":"","title":"ShootingStar"},{"location":"about/#description_4","text":"La classe ShootingStar repr\u00e9sente une \u00e9toile filante dans le jeu. Une \u00e9toile filante se d\u00e9place \u00e0 travers l'\u00e9cran avec une vitesse donn\u00e9e et peut \u00eatre mise \u00e0 jour et dessin\u00e9e.","title":"Description :"},{"location":"about/#methodes-principales_3","text":"ShootingStar(float windowWidth, float windowHeight): Constructeur de la classe qui prend la largeur et la hauteur de la fen\u00eatre du jeu comme param\u00e8tres. void update(float deltaTime): M\u00e9thode pour mettre \u00e0 jour la position de l'\u00e9toile filante en fonction du temps \u00e9coul\u00e9 depuis la derni\u00e8re mise \u00e0 jour. void draw(sf::RenderWindow& window): M\u00e9thode pour dessiner l'\u00e9toile filante sur la fen\u00eatre du jeu. bool isFinished() const: M\u00e9thode pour v\u00e9rifier si l'\u00e9toile filante a termin\u00e9 son trajet.","title":"M\u00e9thodes Principales :"},{"location":"about/#exemple-dutilisation_3","text":"cpp ShootingStar star(800.0f, 600.0f); star.update(0.1f); // Mettre \u00e0 jour la position de l'\u00e9toile filante if (star.isFinished()) { // L'\u00e9toile filante a termin\u00e9 son trajet }","title":"Exemple d'Utilisation :"},{"location":"about/#star","text":"","title":"Star"},{"location":"about/#description_5","text":"La classe Star repr\u00e9sente une \u00e9toile dans le jeu. Les \u00e9toiles sont des objets statiques qui peuvent \u00eatre mises \u00e0 jour et dessin\u00e9es.","title":"Description :"},{"location":"about/#methodes-principales_4","text":"Star(float windowWidth, float windowHeight, float depth): Constructeur de la classe qui prend la largeur et la hauteur de la fen\u00eatre du jeu, ainsi que la profondeur de l'\u00e9toile comme param\u00e8tres. void update(float deltaTime): M\u00e9thode pour mettre \u00e0 jour l'\u00e9toile en fonction du temps \u00e9coul\u00e9 depuis la derni\u00e8re mise \u00e0 jour. void draw(sf::RenderWindow& window): M\u00e9thode pour dessiner l'\u00e9toile sur la fen\u00eatre du jeu. sf::Vector2f getPosition() const: M\u00e9thode pour obtenir la position actuelle de l'\u00e9toile.","title":"M\u00e9thodes Principales :"},{"location":"about/#exemple-dutilisation_4","text":"cpp Star star(800.0f, 600.0f, 1.0f); star.update(0.1f); // Mettre \u00e0 jour l'\u00e9toile sf::Vector2f position = star.getPosition();","title":"Exemple d'Utilisation :"},{"location":"about/#code-conventions-and-best-practices","text":"To maintain code quality and consistency, we follow these coding conventions and best practices: C++ code adheres to industry-standard coding practices. Meaningful variable and function names. Extensive use of comments and documentation. Unit tests for critical components. Git version control with clear commit messages. Code reviews for contributions to ensure quality and conformity. By adhering to these conventions and best practices, we ensure that the codebase remains maintainable and welcoming to new developers.","title":"Code Conventions and Best Practices"},{"location":"about/#tutorials-and-how-tos","text":"To help you get started with contributing to the R-TYPE project in C++, we've prepared a set of tutorials and how-to guides. These resources will walk you through common development tasks and provide step-by-step instructions. How to Implement a New Enemy Type Setting Up Multiplayer and Networking Adding New Game Levels","title":"Tutorials and How-To's"},{"location":"about/#contribution-guidelines","text":"We welcome contributions from C++ developers who are passionate about enhancing the R-TYPE game. Before you start, please review our contribution guidelines to understand our processes and expectations.","title":"Contribution Guidelines"},{"location":"contact/","text":"CONTACTS \ud83d\udcdd\ud83d\udc64 \ud83d\udc64 Bridge ATINDOKPO Github: [@Bridge](https://github.com/laurence090403) Email: bridge.atindokpo@epitech.eu LinkedIn: laurence ATINDOKPO Instagram: [@laurence_atdk](https://instagram.com/laurence_atdk?igshid=MzRlODBiNWFlZA==) T\u00e9l\u00e9phone: +229 52 92 80 93 \ud83d\udc64 ANGE HOUNNOUVI Github: [@Ange](https://github.com/Ange01234) Email: cokou-ange.hounnouvi@epitech.eu LinkedIn: Ange HOUNNOUVI Instagram: [@_angeooo](https://instagram.com/_angeoooo?igshid=MzRlODBiNWFlZA==) T\u00e9l\u00e9phone: +229 51 92 60 67 \ud83d\udc64 Yannick KEKE Github: [@Yannick](https://github.com/olouwafemiii) Email: yannick.keke@epitech.eu LinkedIn: Yannick KEKE Instagram: [@fe_myyy](https://instagram.com/fe__myyy?igshid=MzRlODBiNWFlZA==) T\u00e9l\u00e9phone: +229 90 89 16 63 \ud83d\udc64 Godlyn KIKISSAGBE Github: [@Godlyn](https://github.com/godlynjr) Email: godlyn.kikissagbe@epitech.eu LinkedIn: Godlyn KIKISSAGBE Instagram: [@godlynjr](https://instagram.com/godlynjr?igshid=MzRlODBiNWFlZA==) T\u00e9l\u00e9phone: +229 53 00 53 03 \ud83d\udc64 Jean-luc AHOUANSOU Github: [@Koffi](https://github.com/jeanlucahouansou) Email: jean-luc.ahouansou@epitech.eu LinkedIn: Jean-luc AHOUANSOU Instagram: [@koffi.24](https://instagram.com/koffi.24?igshid=MzRlODBiNWFlZA==) T\u00e9l\u00e9phone: +229 91 51 71 71","title":"Contact"},{"location":"contact/#contacts","text":"\ud83d\udc64 Bridge ATINDOKPO Github: [@Bridge](https://github.com/laurence090403) Email: bridge.atindokpo@epitech.eu LinkedIn: laurence ATINDOKPO Instagram: [@laurence_atdk](https://instagram.com/laurence_atdk?igshid=MzRlODBiNWFlZA==) T\u00e9l\u00e9phone: +229 52 92 80 93 \ud83d\udc64 ANGE HOUNNOUVI Github: [@Ange](https://github.com/Ange01234) Email: cokou-ange.hounnouvi@epitech.eu LinkedIn: Ange HOUNNOUVI Instagram: [@_angeooo](https://instagram.com/_angeoooo?igshid=MzRlODBiNWFlZA==) T\u00e9l\u00e9phone: +229 51 92 60 67 \ud83d\udc64 Yannick KEKE Github: [@Yannick](https://github.com/olouwafemiii) Email: yannick.keke@epitech.eu LinkedIn: Yannick KEKE Instagram: [@fe_myyy](https://instagram.com/fe__myyy?igshid=MzRlODBiNWFlZA==) T\u00e9l\u00e9phone: +229 90 89 16 63 \ud83d\udc64 Godlyn KIKISSAGBE Github: [@Godlyn](https://github.com/godlynjr) Email: godlyn.kikissagbe@epitech.eu LinkedIn: Godlyn KIKISSAGBE Instagram: [@godlynjr](https://instagram.com/godlynjr?igshid=MzRlODBiNWFlZA==) T\u00e9l\u00e9phone: +229 53 00 53 03 \ud83d\udc64 Jean-luc AHOUANSOU Github: [@Koffi](https://github.com/jeanlucahouansou) Email: jean-luc.ahouansou@epitech.eu LinkedIn: Jean-luc AHOUANSOU Instagram: [@koffi.24](https://instagram.com/koffi.24?igshid=MzRlODBiNWFlZA==) T\u00e9l\u00e9phone: +229 91 51 71 71","title":"CONTACTS \ud83d\udcdd\ud83d\udc64"},{"location":"installation/","text":"Installation Prerequisites install Visual studio install buildtools of visual studio install C++ dependencies and cmake in visual studio install conan Installation instructions install Visual studio To install Visual Studio, you can follow these steps: 1- Visit the official Visual Studio website: vscode 2- On the website, you'll see different versions of Visual Studio available. Choose the edition that suits your needs (e.g., Visual Studio Community, Visual Studio Professional, or Visual Studio Enterprise) and click on the \"Download\" button for that edition. 3- Once you click on the \"Download\" button, the Visual Studio installer will start downloading. 4- Once the installer is downloaded, run it by double-clicking on the downloaded file. 5- The installer will launch, and you'll be presented with different installation options and workloads. Workloads are sets of tools and features tailored for specific types of development, such as .NET desktop development, web development, or game development. Select the workloads you need for your development projects. You can also choose individual components if you prefer a more customized installation. 6- After selecting the workloads and components, click on the \"Install\" button to start the installation process. You may need to accept the license terms and choose the installation location during this process. 7- The installer will begin downloading and installing the selected components. This process may take some time, depending on your internet connection speed and the selected components. 8- Once the installation is complete, you can launch Visual Studio from the Start menu or desktop shortcut. 9- When you first launch Visual Studio, you may be prompted to sign in with your Microsoft account or create a new account. Signing in allows you to personalize your Visual Studio experience and access additional features. 10- After signing in, you should be ready to start using Visual Studio for your development projects. Remember to check the system requirements for the specific version of Visual Studio you are installing to ensure compatibility with your operating system. install buildtools of visual studio If you already have Visual Studio Code installed and you just want to install the Build Tools for Visual Studio, you can follow these steps: 1- Go to the Visual Studio downloads page: https://visualstudio.microsoft.com/downloads/. 2- Scroll down to the \"All downloads\" section. Look for the \"Tools for Visual Studio\" category and click on it. 3- In the \"Tools for Visual Studio\" section, you will find different options. Look for the \"Build Tools for Visual Studio\" option and click the \"Download\" button. 4- The Visual Studio Build Tools installer will start downloading. 5- Once the installer is downloaded, run it by double-clicking on the downloaded file. 6- The installer will launch and present you with various installation options. Make sure the \"Workloads\" tab is selected. 7- In the list of workloads, you will find different options for specific types of development. Select the workloads you need for your projects. For example, you might choose \".NET desktop build tools\" or \"Web development build tools.\" You can also choose individual components if you prefer a more customized installation. 8-After selecting the workloads and components, click the \"Install\" button to start the installation process. You may need to accept the license terms during this process. 9- The installer will begin downloading and installing the selected components. This process may take some time, depending on your internet connection speed and the selected components. 10- Once the installation is complete, you can use the Build Tools for Visual Studio from the command line or integrate them into your preferred development environment. It's important to note that the Build Tools for Visual Studio provide command-line tools and compilers without the Visual Studio IDE. They are designed for scenarios where you only need the build-related tools and not the full development environment. install C++ dependencies and cmake in visual studio To install C++ dependencies and CMake in Visual Studio, you can follow these steps: 1- Open Visual Studio and go to the \"Extensions\" menu. 2- Select \"Manage Extensions\" from the dropdown menu. This will open the Extensions and Updates window. 3- In the search bar of the Extensions and Updates window, type \"C++\" and press Enter. 4- Look for the \"C++ Desktop Development\" extension and click on the \"Download\" button next to it. 5- Wait for the extension to be downloaded and installed. You may need to restart Visual Studio after the installation is complete. 6- Once Visual Studio restarts, go to the \"File\" menu and select \"New\" and then \"Project\". This will open the New Project window. 7- In the New Project window, expand the \"Installed\" templates on the left-hand side and select \"Visual C++\". 8- Choose a project template that suits your needs, such as \"Console Application\" or \"Windows Desktop Application\". Select the template and click \"Next\". 9- Configure the project settings as desired, and click on the \"Create\" button to create the project. 10- Once the project is created, you can start adding C++ code files to it. 11- To use CMake in Visual Studio, you can either create a new project with CMake support or add CMake support to an existing project. To create a new project with CMake support: Go to the \"File\" menu and select \"New\" and then \"Project\". In the New Project window, expand the \"Installed\" templates on the left-hand side and select \"C++\". Select the \"CMake Project\" template and click \"Next\". Configure the project settings and click on the \"Create\" button to create the project. To add CMake support to an existing project: Right-click on the project in the Solution Explorer and select \"Add\" and then \"New Item\". In the Add New Item window, search for \"CMake\" in the search bar. Select the \"CMake Settings\" item and click \"Add\". 12- Once you have a project with CMake support, you can configure your CMakeLists.txt file to specify the dependencies and build settings for your project. Open the CMakeLists.txt file in your project. Use the CMake commands and syntax to configure your project's dependencies, include directories, libraries, and build options. 13- Build your project by selecting \"Build\" from the Visual Studio menu or pressing Ctrl+Shift+B. That's it! You have now installed C++ dependencies and CMake in Visual Studio, and you can start developing C++ projects using these tools. Please note that the specific steps may vary slightly depending on the version of Visual Studio you are using. install conan To install Conan, a package manager for C++ dependencies, you can follow these steps: 1- Open a command prompt or terminal window. 2- Make sure you have Python installed on your system. You can check if Python is installed by running the following command: python --version If Python is not installed, visit the Python website (https://www.python.org/) and download the latest version of Python for your operating system. Follow the installation instructions provided. 3- Once Python is installed, you can install Conan using pip, the package installer for Python. Run the following command: pip install conan This command will download and install Conan and its dependencies. 4- After the installation is complete, you can verify that Conan is installed correctly by running the following command: conan --version This command will display the version of Conan installed on your system. 5- Conan is now installed and ready to use. You can start using Conan to manage C++ dependencies for your projects. To learn more about how to use Conan, you can refer to the Conan documentation (https://docs.conan.io/). That's it! You have successfully installed Conan on your system. You can now use Conan to manage your C++ dependencies for your projects. Examples of use clone the project git clone git@github.com:EpitechPromo2025/B-CPP-500-COT-5-1-rtype-yannick.keke.git launch cmake cmake -S . -B ./build/ then make cd build/ make and the project is finally ready to launch Usage \ud83d\udccb Make sure you have cmake installed STEP1: Compile on Linux pip install conan conan profile detect --force conan install . --output-folder=build --build=missing cd build cmake -DCMAKE_BUILD_TYPE=Release .. make root of the project run the binaries STEP2: Compile on Windows install Visual studio install buildtools of visual studio install C++ dependencies and cmake in visual studio install conan conan profile detect --force conan install . --output-folder=build --build=missing cd build cmake -DCMAKE_TOOLCHAIN_FILE=. .. cmake --build . --config Release root of the project run the binaries these are the binaries: r-type_server.exe and r-type_client.exe To launch the server: ./r_type_server <address> <port> <lobby_status> Now, the clients could connect to the server To launch the client: ./r_type_client <address> <port> <sound> <lobby_status> Enjoy the gameplay, and tell your friends to join you ! \ud83c\udf89","title":"Installation instructions"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#prerequisites","text":"install Visual studio install buildtools of visual studio install C++ dependencies and cmake in visual studio install conan","title":"Prerequisites"},{"location":"installation/#installation-instructions","text":"install Visual studio To install Visual Studio, you can follow these steps: 1- Visit the official Visual Studio website: vscode 2- On the website, you'll see different versions of Visual Studio available. Choose the edition that suits your needs (e.g., Visual Studio Community, Visual Studio Professional, or Visual Studio Enterprise) and click on the \"Download\" button for that edition. 3- Once you click on the \"Download\" button, the Visual Studio installer will start downloading. 4- Once the installer is downloaded, run it by double-clicking on the downloaded file. 5- The installer will launch, and you'll be presented with different installation options and workloads. Workloads are sets of tools and features tailored for specific types of development, such as .NET desktop development, web development, or game development. Select the workloads you need for your development projects. You can also choose individual components if you prefer a more customized installation. 6- After selecting the workloads and components, click on the \"Install\" button to start the installation process. You may need to accept the license terms and choose the installation location during this process. 7- The installer will begin downloading and installing the selected components. This process may take some time, depending on your internet connection speed and the selected components. 8- Once the installation is complete, you can launch Visual Studio from the Start menu or desktop shortcut. 9- When you first launch Visual Studio, you may be prompted to sign in with your Microsoft account or create a new account. Signing in allows you to personalize your Visual Studio experience and access additional features. 10- After signing in, you should be ready to start using Visual Studio for your development projects. Remember to check the system requirements for the specific version of Visual Studio you are installing to ensure compatibility with your operating system. install buildtools of visual studio If you already have Visual Studio Code installed and you just want to install the Build Tools for Visual Studio, you can follow these steps: 1- Go to the Visual Studio downloads page: https://visualstudio.microsoft.com/downloads/. 2- Scroll down to the \"All downloads\" section. Look for the \"Tools for Visual Studio\" category and click on it. 3- In the \"Tools for Visual Studio\" section, you will find different options. Look for the \"Build Tools for Visual Studio\" option and click the \"Download\" button. 4- The Visual Studio Build Tools installer will start downloading. 5- Once the installer is downloaded, run it by double-clicking on the downloaded file. 6- The installer will launch and present you with various installation options. Make sure the \"Workloads\" tab is selected. 7- In the list of workloads, you will find different options for specific types of development. Select the workloads you need for your projects. For example, you might choose \".NET desktop build tools\" or \"Web development build tools.\" You can also choose individual components if you prefer a more customized installation. 8-After selecting the workloads and components, click the \"Install\" button to start the installation process. You may need to accept the license terms during this process. 9- The installer will begin downloading and installing the selected components. This process may take some time, depending on your internet connection speed and the selected components. 10- Once the installation is complete, you can use the Build Tools for Visual Studio from the command line or integrate them into your preferred development environment. It's important to note that the Build Tools for Visual Studio provide command-line tools and compilers without the Visual Studio IDE. They are designed for scenarios where you only need the build-related tools and not the full development environment. install C++ dependencies and cmake in visual studio To install C++ dependencies and CMake in Visual Studio, you can follow these steps: 1- Open Visual Studio and go to the \"Extensions\" menu. 2- Select \"Manage Extensions\" from the dropdown menu. This will open the Extensions and Updates window. 3- In the search bar of the Extensions and Updates window, type \"C++\" and press Enter. 4- Look for the \"C++ Desktop Development\" extension and click on the \"Download\" button next to it. 5- Wait for the extension to be downloaded and installed. You may need to restart Visual Studio after the installation is complete. 6- Once Visual Studio restarts, go to the \"File\" menu and select \"New\" and then \"Project\". This will open the New Project window. 7- In the New Project window, expand the \"Installed\" templates on the left-hand side and select \"Visual C++\". 8- Choose a project template that suits your needs, such as \"Console Application\" or \"Windows Desktop Application\". Select the template and click \"Next\". 9- Configure the project settings as desired, and click on the \"Create\" button to create the project. 10- Once the project is created, you can start adding C++ code files to it. 11- To use CMake in Visual Studio, you can either create a new project with CMake support or add CMake support to an existing project. To create a new project with CMake support: Go to the \"File\" menu and select \"New\" and then \"Project\". In the New Project window, expand the \"Installed\" templates on the left-hand side and select \"C++\". Select the \"CMake Project\" template and click \"Next\". Configure the project settings and click on the \"Create\" button to create the project. To add CMake support to an existing project: Right-click on the project in the Solution Explorer and select \"Add\" and then \"New Item\". In the Add New Item window, search for \"CMake\" in the search bar. Select the \"CMake Settings\" item and click \"Add\". 12- Once you have a project with CMake support, you can configure your CMakeLists.txt file to specify the dependencies and build settings for your project. Open the CMakeLists.txt file in your project. Use the CMake commands and syntax to configure your project's dependencies, include directories, libraries, and build options. 13- Build your project by selecting \"Build\" from the Visual Studio menu or pressing Ctrl+Shift+B. That's it! You have now installed C++ dependencies and CMake in Visual Studio, and you can start developing C++ projects using these tools. Please note that the specific steps may vary slightly depending on the version of Visual Studio you are using. install conan To install Conan, a package manager for C++ dependencies, you can follow these steps: 1- Open a command prompt or terminal window. 2- Make sure you have Python installed on your system. You can check if Python is installed by running the following command: python --version If Python is not installed, visit the Python website (https://www.python.org/) and download the latest version of Python for your operating system. Follow the installation instructions provided. 3- Once Python is installed, you can install Conan using pip, the package installer for Python. Run the following command: pip install conan This command will download and install Conan and its dependencies. 4- After the installation is complete, you can verify that Conan is installed correctly by running the following command: conan --version This command will display the version of Conan installed on your system. 5- Conan is now installed and ready to use. You can start using Conan to manage C++ dependencies for your projects. To learn more about how to use Conan, you can refer to the Conan documentation (https://docs.conan.io/). That's it! You have successfully installed Conan on your system. You can now use Conan to manage your C++ dependencies for your projects.","title":"Installation instructions"},{"location":"installation/#examples-of-use","text":"clone the project git clone git@github.com:EpitechPromo2025/B-CPP-500-COT-5-1-rtype-yannick.keke.git launch cmake cmake -S . -B ./build/ then make cd build/ make and the project is finally ready to launch","title":"Examples of use"},{"location":"installation/#usage","text":"Make sure you have cmake installed STEP1: Compile on Linux pip install conan conan profile detect --force conan install . --output-folder=build --build=missing cd build cmake -DCMAKE_BUILD_TYPE=Release .. make root of the project run the binaries STEP2: Compile on Windows install Visual studio install buildtools of visual studio install C++ dependencies and cmake in visual studio install conan conan profile detect --force conan install . --output-folder=build --build=missing cd build cmake -DCMAKE_TOOLCHAIN_FILE=. .. cmake --build . --config Release root of the project run the binaries these are the binaries: r-type_server.exe and r-type_client.exe To launch the server: ./r_type_server <address> <port> <lobby_status> Now, the clients could connect to the server To launch the client: ./r_type_client <address> <port> <sound> <lobby_status> Enjoy the gameplay, and tell your friends to join you ! \ud83c\udf89","title":"Usage \ud83d\udccb"},{"location":"license/","text":"license License name: Copyright License License Description: Copyright \u00a9 2023 Bridge ATINDOKPO Ange HOUNNOUVI Yannick KEKE Godlyn KIKISSAGBE Jean-Luc AHOUANSOU Rights Reservation Clause: All rights reserved No Redistribution Clause: Unauthorized reproduction Limitation of Liability Clause: This project is provided as is, without warranty of any kind, express or implied. The author disclaims all liability for damages resulting from the use of this project. Personal Use Clause: This project is intended for personal use only and may not be used for commercial purposes without prior authorization. LICENSE Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION Definitions. \"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. \"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. \"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. \"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License. \"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. \"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. \"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). \"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. \"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\" \"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS APPENDIX: How to apply the Apache License to your work. To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets \"[]\" replaced with your own identifying information. (Don't include the brackets!) The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \"printed page\" as the copyright notice for easier identification within third-party archives. Copyright [yyyy] [name of copyright owner] Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"License"},{"location":"license/#license","text":"","title":"license"},{"location":"license/#license-name","text":"Copyright License","title":"License name:"},{"location":"license/#license-description","text":"Copyright \u00a9 2023 Bridge ATINDOKPO Ange HOUNNOUVI Yannick KEKE Godlyn KIKISSAGBE Jean-Luc AHOUANSOU","title":"License Description:"},{"location":"license/#rights-reservation-clause","text":"All rights reserved","title":"Rights Reservation Clause:"},{"location":"license/#no-redistribution-clause","text":"Unauthorized reproduction","title":"No Redistribution Clause:"},{"location":"license/#limitation-of-liability-clause","text":"This project is provided as is, without warranty of any kind, express or implied. The author disclaims all liability for damages resulting from the use of this project.","title":"Limitation of Liability Clause:"},{"location":"license/#personal-use-clause","text":"This project is intended for personal use only and may not be used for commercial purposes without prior authorization.","title":"Personal Use Clause:"},{"location":"license/#license_1","text":"Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION Definitions. \"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. \"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. \"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. \"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License. \"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. \"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. \"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). \"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. \"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\" \"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS APPENDIX: How to apply the Apache License to your work. To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets \"[]\" replaced with your own identifying information. (Don't include the brackets!) The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \"printed page\" as the copyright notice for easier identification within third-party archives. Copyright [yyyy] [name of copyright owner] Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"LICENSE"}]}